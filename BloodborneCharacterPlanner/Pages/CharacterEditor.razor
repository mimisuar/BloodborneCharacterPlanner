@page "/editor/{CharacterId:int?}"
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using BloodborneCharacterPlanner.Utilities
@inject ApplicationDbContext Context
@inject SignInManager<AppUser> SignInMan

<h3>CharacterEditor</h3>

<div class="container-md">
	<div class="row align-items-center">
		<div class="col">
			<EditForm class="row g-2" EditContext="editContext" OnValidSubmit="OnValidSubmit">
				<DataAnnotationsValidator></DataAnnotationsValidator>
				<ValidationSummary></ValidationSummary>

				<div class="col-md-12">
					<label class="form-label">Name: </label>
					<InputText class="form-control" @bind-Value="editTarget!.Name" ></InputText>
				</div>
	

				<div class="col-md-12">
					<label class="form-label">Origin: </label>
					<InputSelect class="form-control" @bind-Value:get="editTarget!.Origin" @bind-Value:set="OnOriginChanged">
						@foreach (var origin in Enum.GetValues(typeof(BBCharacterOrigin)))
						{
						<option value="@origin">@origin</option>
						}
					</InputSelect>
				</div>

				<div class="col-md-12">
					<label class="form-label">Level: </label>
					<input type="number" class="form-control" disabled readonly value=@editTarget!.GetLevel() />
				</div>

				<div class="col-md-12">
					<label class="form-label">Blood Echo Cost: </label>
					<input type="number" class="form-control" disabled readonly value=@editTarget.GetBloodEchoCost() />
				</div>
	
				<div class="col-sm-12">
					<label class="form-label">Vitality: </label>
					<InputNumber class="form-control" @bind-Value="editTarget!.Vitality"></InputNumber>
				</div>
	
				<div class="col-sm-12">
					<label class="form-label">Endurance: </label>
					<InputNumber class="form-control" @bind-Value="editTarget!.Endurance"></InputNumber>
				</div>

				<div class="col-sm-12">
					<label class="form-label">Strength: </label>
					<InputNumber class="form-control" @bind-Value="editTarget!.Strength"></InputNumber>
				</div>

				<div class="col-sm-12">
					<label class="form-label">Skill: </label>
					<InputNumber class="form-control" @bind-Value="editTarget!.Skill"></InputNumber>
				</div>
	
				<div class="col-sm-12">
					<label class="form-label">Bloodtinge: </label>
					<InputNumber class="form-control" @bind-Value="editTarget!.Bloodtinge"></InputNumber>
				</div>
	
				<div class="col-sm-12">
					<label class="form-label">Arcane: </label>
					<InputNumber class="form-control" @bind-Value="editTarget!.Arcane"></InputNumber>
				</div>
	
				<div class="col-md-6">
					<button type="submit" class="btn btn-primary">Save Changes</button>
				</div>
	
			</EditForm>
		</div>

		
	</div>
</div>

@code {
	[CascadingParameter]
	public Task<AuthenticationState>? AuthState { get; set; }

	[Parameter]
	public int CharacterId { get; set; }

	private BBCharacter? editTarget = new BBCharacter();
	private StatBlock targetBlock;
	private EditContext? editContext;
	private ValidationMessageStore? messageStore;

	private int level;

	private bool saving = false;

	protected override async Task OnInitializedAsync()
	{
		editContext = new EditContext(editTarget!);
		messageStore = new ValidationMessageStore(editContext);

		if (AuthState == null) return;

		var authState = await AuthState;
		var user = authState.User;
		if (user == null) return;

		if (!SignInMan.IsSignedIn(user)) return;
		var editingUser = await SignInMan.UserManager.GetUserAsync(user);
		if (editingUser == null) return;

		editTarget = Context.CharacterSet.FirstOrDefault(e => e.Id == CharacterId && editingUser.Id == e.CreatorId);
		if (editTarget == null) 
		{
			Console.WriteLine("Making an new character");
			editTarget = new BBCharacter()
			{
				Creator = editingUser,
				CreatorId = editingUser.Id,
				Name = "Untitled"
			};
			OnOriginChanged(BBCharacterOrigin.Milquetoast);
			Context.CharacterSet.Add(editTarget);
			await Context.SaveChangesAsync();
		};

		editContext = new EditContext(editTarget);
		messageStore = new ValidationMessageStore(editContext);
		editContext.OnValidationRequested += HandleValidationRequest;

		targetBlock = StatBlock.Blocks[editTarget.Origin];
		Console.WriteLine("We are good to go");
	}

	private async Task OnValidSubmit()
	{
		if (saving) return;

		saving = true;
		await Context.SaveChangesAsync();
		saving = false;
	}

	private void HandleValidationRequest(object? sender, ValidationRequestedEventArgs args)
	{
		messageStore?.Clear();

		if (editTarget!.Vitality < targetBlock.Vit 
			|| editTarget.Endurance < targetBlock.End 
			|| editTarget.Strength < targetBlock.Str 
			|| editTarget.Skill < targetBlock.Skl
			|| editTarget.Bloodtinge < targetBlock.Blt 
			|| editTarget.Arcane < targetBlock.Arc)
		{
			messageStore?.Add(() => editTarget, "Build stats can't be less than origin stats.");
		}

		int level = editTarget.GetLevel();
		if (level < 4 || level > 545)
		{
			messageStore?.Add(() => editTarget, "Level minimum is 4 and maximum is 545.");
		}
	}

	private void OnOriginChanged(BBCharacterOrigin origin)
	{
		editTarget!.Origin = origin;

		targetBlock = StatBlock.Blocks[editTarget.Origin];
		editTarget.Vitality = targetBlock.Vit;
		editTarget.Endurance = targetBlock.End;
		editTarget.Strength = targetBlock.Str;
		editTarget.Skill = targetBlock.Skl;
		editTarget.Bloodtinge = targetBlock.Blt;
		editTarget.Arcane = targetBlock.Arc;
		level = editTarget.GetLevel();
	}
}
