@using Microsoft.EntityFrameworkCore
@implements IDisposable
@inject IDbContextFactory<ApplicationDbContext> ContextFactory

@if (SignedInUser != null)
{
	@if (_characters?.Count() == 0)
	{
		<p>Looks like you haven't made any characteres yet.</p>
		<p><a href="/editor">Click here</a> to make a character.</p>
	}
	else if (_characters != null)
	{
		<table>
			<tr>
				<th>Character Name</th>
				<th></th>
				<th></th>
			</tr>

			@foreach (BBCharacter bbchar in _characters)
			{
			<tr>
				<td>@bbchar.Name</td>
				<td><a href="/editor/@bbchar.Id">Edit</a></td>
				<td><a href="/delete/@bbchar.Id">Delete</a></td>
			</tr>
			}

			<tr>
				<td><a href="/editor">Create</a></td>
				<td> </td>
				<td> </td>
			</tr>
		</table>
		
	}
}
else
{
	<p>Something went wrong.</p>
}

@code {
	private ApplicationDbContext? _context;
	private IEnumerable<BBCharacter>? _characters;

	[Parameter]
	public AppUser? SignedInUser { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		if (SignedInUser == null)
		{
			return;
		}

		_context = await ContextFactory.CreateDbContextAsync();

		_characters = await _context.CharacterSet.Where(e => e.CreatorId == SignedInUser.Id).ToListAsync();
		return;
	}

	public void Dispose()
	{
		_context?.Dispose();
	}
}
